#lang racket
;; (actualizar '("a" "b" "r"))
(define(actualizar list1)
  (cond((equal? (contar list1) 1) (list (actualizar_aux list1) '(1 1) '(0 17) '('() '()) '("cartas") 1))
       ((equal? (contar list1) 2) (list (actualizar_aux list1) '(1 1 1) '(0 0 17) '('() '() '()) '("cartas") 2))
       (else (list (actualizar_aux list1) '(1 1 1 1) '(0 0 0 17) '('() '() '() '()) '("cartas") 3))
       ))

(define(actualizar_aux list1)
  (cond((null? list1) '("Crupier"))
       ((equal?  (car list1) "-") (actualizar_aux (cdr list1)))
       (else (cons (car list1) (actualizar_aux (cdr list1))))
       ))

(define(contar list1)
  (cond((null? list1) 0)
       ((equal? (car list1) "-") (+ 0 (contar (cdr list1))))
       (else (+ 1 (contar (cdr list1))))
       ))

;; (mayor(caddr(actualizar '("a" "b" "r"))))
(define(mayor lista)
  (cond((null? lista) '())
       (else (mayor_aux (car lista) (cdr lista)))
       ))
(define(mayor_aux ele lista)
  (cond((null? lista) ele)
       ((< ele (car lista)) (mayor_aux (car lista) (cdr lista)))
       (else (mayor_aux ele (cdr lista)))
       ))
(define (eliminate_aux list1 num)
  (cond((equal? num 0) (cdr list1))
       (else (cons (car list1) (eliminate_aux (cdr list1) (- num 1))))
       ))
;;(eliminate (actualizar '("a" "b" "r")) 1)
(define(eliminate list1 num)
  (list (eliminate_aux(car list1) num) (eliminate_aux(cadr list1)num) (eliminate_aux(caddr list1)num) (cadddr list1) (car(cddddr list1)) (cadr(cddddr list1))))

;; (winner '(("Crupier" 17 "No" 1) ("a" 0 "No" 1) ("b" 0 "No" 1) ("r" 0 "No" 1)) 1)
(define(winner list1 num)
  (cond((equal? num 0) list1)
       ((< 21 (cadar list1)) (cons (car list1) (winner (cdr list1) num)))
       (else (cons (list (caar list1) (cadar list1) "Yes" (car(cdddar list1))) (winner (cdr list1) 0)))
       ))

;; (table (actualizar '("a" "b" "r")))
(define(table list1)
  (append (list (cadr(cddddr list1))) (winner(table_aux list1 (mayor (caddr list1)))1)))

(define(table_aux list1 max)
  (cond((null? max) '())
       ((equal? max (caaddr list1)) (cons (list (caar list1) (caaddr list1) "" (caadr list1))
                                          (table_aux (eliminate list1 0) (mayor (eliminate_aux(caddr list1) 0)))))
       ((equal? max (car (cdaddr list1))) (cons(list (cadar list1) (car (cdaddr list1)) "" (cadadr list1))
                                          (table_aux (eliminate list1 1) (mayor (eliminate_aux(caddr list1) 1)))))
       ((equal? max (cadr(cdaddr list1))) (cons(list (caddar list1) (cadr(cdaddr list1)) "" (car(cddadr list1)))
                                          (table_aux (eliminate list1 2) (mayor (eliminate_aux(caddr list1) 2)))))
       ((equal? max (caddr(cdaddr list1))) (cons(list (car(cdddar list1)) (caddr(cdaddr list1)) "" (cadr(cddadr list1)))
                                           (table_aux (eliminate list1 3) (mayor (eliminate_aux(caddr list1) 3)))))
       ))

(provide (all-defined-out))